<br />

> [!CAUTION]
> This proposal will change to `try-expressions` as its a more idiomatic apporach to this problem. Read more on [#4](https://github.com/arthurfiorette/proposal-safe-assignment-operator/issues/4) and [#5](https://github.com/arthurfiorette/proposal-safe-assignment-operator/issues/5).
>
> Help on its rewriting is needed :)

<br />

<h1>ECMAScript Try Expression Proposal</h1>

> [!WARNING]  
> This proposal is actively under development, and [contributions are welcome](#help-us-improve-this-proposal).

<br />

This proposal introduces a new usage of the `try` keyword, which simplifies error handling by transforming the result of an expression into a tuple. If the expression throws an error, the keyword returns `[TryError, undefined]`; if the expression executes successfully, it returns `[undefined, result]`.

```js
class TryError extends Error {
  constructor(inner){
    super(inner);
    this.name = "TryError";
    this.inner = inner;
  }
}

// replacing this:
const [error, data] = (() => {try{return[undefined,JSON.parse("undefined")]}catch(e){return [new TryError(e),undefined]}})();

// with this:
const [error, data] = try JSON.parse("undefined");

// error.inner.message === '"undefined" is not valid JSON'
// error.message === 'SyntaxError: "undefined" is not valid JSON'
// error.toString() === 'TryError: SyntaxError: "undefined" is not valid JSON'
// data === undefined;

```

This allows us to try-catch an expression like `JSON.parse(...)` with much less code, and also allows us to use `const` instead of `let` or `var`.

```js
// quick and dirty
let jsonbody;
try {
  jsonbody = JSON.parse(body);
} catch (e) {
  // handle the error
}

//or more robustly
const [error1, jsonbody] = (() => {
  try {
    return [undefined, JSON.parse(body)];
  } catch (e) {
    return [new TryError(e), undefined];
  }
})();
if (error1) {
  // handle the error
}
```

Becomes

```js
// always robust
const [error1, jsonbody] = try JSON.parse(body);

if(error1) {
  //handle the error
}
```

In addition, when performing I/O operations or otherwise interacting with Promise-based APIs, errors can occur unexpectedly at runtime. Neglecting to handle these errors can lead to unintended behavior and potential security vulnerabilities.

<br />

```js
// can fetch throw directly or does it always return a rejected promise?
const [error, response] = await fetch("https://arthur.place").then(
  (e) => [undefined, e],
  (e) => [new TryError(e), undefined]
);
if (error) {
  alert("error fetching the data");
  return;
}
```

Becomes

```js
// doesn't matter if fetch throws or returns a promise
const [error, response] = try await fetch("https://arthur.place");
if(error) {
  alert("error fetching the data");
  return;
}
```

<hr />
<br />

- [Motivation](#motivation)
- [Proposed Features](#proposed-features)
  - [`Symbol.result`](#symbolresult)
  - [The Safe Assignment Keyword (`try`)](#the-safe-assignment-keyword-)
    - [Usage in Functions](#usage-in-functions)
    - [Usage with Objects](#usage-with-objects)
  - [Recursive Handling](#recursive-handling)
  - [Promises](#promises)
  - [`using` Statement](#using-statement)
- [Try/Catch Is Not Enough](#trycatch-is-not-enough)
- [Why Not `data` First?](#why-not-data-first)
- [Polyfilling](#polyfilling)
- [Using `?=` with Functions and Objects Without `Symbol.result`](#using--with-functions-and-objects-without-symbolresult)
- [Comparison](#comparison)
- [Similar Prior Art](#similar-prior-art)
- [What This Proposal Does Not Aim to Solve](#what-this-proposal-does-not-aim-to-solve)
- [Current Limitations](#current-limitations)
- [Help Us Improve This Proposal](#help-us-improve-this-proposal)
- [Authors](#authors)
- [Inspiration](#inspiration)
- [Inspiration](#inspiration-1)
- [License](#license)

<br />

## Motivation

- **Simplified Error Handling**: Streamline error management by eliminating the need for try-catch blocks and parent-scoped result variables.
- **Enhanced Readability**: Improve code clarity by reducing nesting and making the flow of error handling more intuitive.
- **Consistency Across APIs**: Establish a uniform approach to error handling across various APIs, and between sync and async, ensuring predictable behavior.
- **Improved Security**: Reduce the risk of overlooking error handling, thereby enhancing the overall security of the code.

<br />

<!-- credits to https://www.youtube.com/watch?v=SloZE4i4Zfk -->

How often have you seen code like this?

```ts
async function getData() {
  const response = await fetch("https://api.example.com/data");
  const json = await response.json();
  return validationSchema.parse(json);
}
```

The issue with the above function is that it can fail silently, potentially crashing your program without any explicit warning.

1. `fetch` can reject.
2. `json` can reject.
3. `parse` can throw.
4. Each of these can produce multiple types of errors.

The current solution is to surround each step in a try-catch statement, use var (or let in the parent block) to get the result, and continue. If you want more robust code which doesn't accidentally forget to declare or assign one of the variables, you can nest the try catch statements, or put each of the calls in a child function. All solutions have a lot of boilerplate syntax.

```ts
function getData() {
  let response, json;

  try {
    response = await fetch("https://api.example.com/data");
  } catch (e) {
    handleRequestError(e);
    return;
  }

  try {
    json = await response.json();
  } catch (e) {
    handleParseError(e);
    return;
  }

  try {
    // straight up forgetting to declare this, so it gets declared as a global
    schema = validationSchema.parse(json);
  } catch (e) {
    handleValidationError(e);
    return;
  }

  return schema;
}
```

To address this, we propose the adoption of a new expression keyword (`try`), which facilitates more concise and readable error handling.

```ts
async function getData() {

  const [requestError, response] = try await fetch("https://api.example.com/data")

  if (requestError) {
    handleRequestError(requestError.inner)
    return
  }

  const [parseError, json] = try await response.json()

  if (parseError) {
    handleParseError(parseError.inner)
    return
  }

  // This time the global scope assignment seems intentional. It's a lot harder to forget and a lot more noticable.
  [validationError, schema] = try validationSchema.parse(json)

  if (validationError) {
    handleValidationError(validationError.inner)
    return
  }

  return data
}
```

<br />

Please refer to the [What This Proposal Does Not Aim to Solve](#what-this-proposal-does-not-aim-to-solve) section to understand the limitations of this proposal.

<br />

## Proposed Features

This proposal aims to introduce the following features:

<br />

### The Try Expression (`try`)

The `try` keyword wraps the expression to the right, in the same way as a try-catch statement would, and returns `[error, undefined]` if the expression throws and `[undefined, result]` if the expression runs successfully.

```ts
const [error1, data1] = try expression;

function action() { return 'data'; }

const [error2, data2] = try action(argument)
```

[Why Not `data` First?](#why-not-data-first)

The result should conform to the format `[error, undefined]` or `[undefined, data]`.

<br />

### Promises

Because await semantically turns a promise rejection into a thrown error, the try keyword must catch any promise rejections being awaited, but must not catch promises being returned from the expression.

```ts
const [error1, data1] = try await Promise.reject("awaited promise");
console.log(error1); // TryError: awaited promise
console.log(data1); // undefined

const [error2, data2] = try Promise.reject("returned promise");
console.log(error2); // undefined
console.log(data2); // Promise { <rejected>: "returned promise" }
```

<br />

## Try/Catch Is Not Enough

<!-- credits to https://x.com/LeaVerou/status/1819381809773216099 -->

The `try {}` block is rarely useful, as its scoping lacks conceptual significance. It often functions more as a code annotation rather than a control flow construct. Unlike control flow blocks, there is no program state that is meaningful only within a `try {}` block.

In contrast, the `catch {}` block **is** actual control flow, and its scoping is meaningful and relevant.

Using `try/catch` blocks has **two main syntax problems**:

```js
// Nests 1 level for each error handling block
async function readData(filename) {
  try {
    const fileContent = await fs.readFile(filename, "utf8");

    try {
      const json = JSON.parse(fileContent);

      return json.data;
    } catch (error) {
      handleJsonError(error);
      return;
    }
  } catch (error) {
    handleFileError(error);
    return;
  }
}

// Declares reassignable variables outside the block, which is undesirable and more error-prone
async function readData(filename) {
  let fileContent;
  let json;

  try {
    fileContent = await fs.readFile(filename, "utf8");
  } catch (error) {
    handleFileError(error);
    return;
  }

  try {
    json = JSON.parse(fileContent);
  } catch (error) {
    handleJsonError(error);
    return;
  }

  return json.data;
}
```

<br />

## Why Not `data` First?

In Go, the convention is to place the data variable first, and you might wonder why we don't follow the same approach in JavaScript. In Go, this is the standard way to call a function. However, in the JavaScript ecosystem, most callbacks already put the error first, so this is not a foriegn concept.

In addition, we already have the option to use `const data = fn()` and choose to ignore the error, which is precisely the issue we are trying to address. If someone is using the try keyword, it is because they want to ensure that they handle errors, not forget them. Placing the data first would contradict this principle, as it prioritizes the result over error handling.

```ts
// ignores errors!
const data = fn()

// Look how simple it is to forget to handle the error if data is first
const [data] = try fn()

// This is the way to go
const [error, data] = try fn()
```

If you want to suppress the error (which is **different** from ignoring the possibility of a function throwing an error), you can simply do the following:

```ts
// This intentionally suppresses the error (ignores it and doesn't re-throw it)
const [, data] = try fn();

// with JSON.parse, for example:
const [, data1] = try JSON.parse("<html>my html</html>");
if(data1 === undefined) return;
```

This approach is much more explicit and readable because it acknowledges that there might be an error, but indicates that you do not care about it.

The above method is also known as "try-catch calaboca" (a Brazilian term) and can be rewritten as:

```ts
let data;
try {
  data = fn();
} catch {}
```

Complete discussion about this topic at https://github.com/arthurfiorette/proposal-safe-assignment-operator/issues/13 if the reader is interested.

<br />

## Polyfilling

This proposal can be polyfilled using the code provided at [`polyfill.js`](./polyfill.js).

However, the try keyword itself cannot be polyfilled directly. When targeting older JavaScript environments, a post-processor should be used to transform the try expression into the corresponding [IIFE](https://developer.mozilla.org/en-US/docs/Glossary/IIFE).

If the try expression contains an await expression inside it, then we need to await the entire expression.

```ts
const [error, data] = try JSON.parse(await asyncAction(arg1, arg2))
// should become
const [error, data] = await (async () => { try { return [undefined,
  JSON.parse(await asyncAction(arg1, arg2)) // the try expression
] } catch (e) { return [e, undefined] })();
```

An expression with no await needs to be executed syncly, even if it appears in an async function.

```ts
const [error, data] = try action()
// should become
const [error, data] = (() => { try { return [undefined,
  action() // the try expression
] } catch (e) { return [new TryError(e), undefined] })();
```

```ts
const [error, data] = try obj
// should become
const [error, data] = (() => { try { return [undefined,
  obj // the try expression
] } catch (e) { return [e, undefined] })();
// since this could be a getter defined on the global or module scope,
// If the expression is incapable of throwing, then it is pointless.
```

<br />

## Comparison

Importantly, the word `try` cannot be used as a function name, so there is no situation where the try keyword can currently be used in an expression.

```js
function try() { console.log("test"); } //SyntaxError: Unexpected token 'try'
```

The try expression proposal does not introduce new logic to the language. Everything this proposal aims to achieve can already be accomplished with current, though _verbose and error-prone_, language features.

```ts
let data;
try {
  data = someaction(); // try expression
} catch (error) {
  // catch code
}

// or

const data = someaction() // try expression
  .catch((error) => {
    // catch code
  });

// or

const [error, data] = (() => {
  try {
    return [
      undefined,
      //try expression
    ];
  } catch (e) {
    return [new TryError(e), undefined];
  }
})();

// or

const [error, data] = await(async () =>
  // try expression with await expression
  parseXML(await (await fetch("")).text())
)().then(
  (e) => [undefined, e],
  (e) => [new TryError(e), undefined]
);

// or for Typescript
function try_<T>(fn: () => T): [TryError, undefined] | [undefined, T] {
  try {
    return [undefined, fn()];
  } catch (e) {
    return [new TryError(e), undefined];
  }
}
const [error, data] = try_(() => {
  // do what we need to
  return 25;
});
```

is equivalent to:

```ts
const [error, data] = try (expression || promise)

if (error) {
  // catch code
} else {
  // try code
}
```

<br />

## Similar Prior Art

This pattern is architecturally present in many languages:

- **Go**
  - [Error Handling](https://go.dev/blog/error-handling-and-go)
- **Rust**
  - [`?` Operator](https://doc.rust-lang.org/rust-by-example/error/result/enter_question_mark.html#introducing-)
  - [`Result` Type](https://doc.rust-lang.org/rust-by-example/error/result.html#result)
- **Swift**
  - [The `try?` Operator](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/errorhandling/#Converting-Errors-to-Optional-Values)
- **Zig**
  - [`try` Keyword](https://ziglang.org/documentation/0.10.1/#try)
- _And many others..._

While this proposal cannot offer the same level of type safety or strictness as these languages—due to JavaScript's dynamic nature and the fact that the `throw` statement can throw anything—it aims to make error handling more consistent and manageable.

<br />

## What This Proposal Does Not Aim to Solve

1. **Strict Type Enforcement for Errors**: The `throw` statement in JavaScript can throw any type of value. To work around this we add a new Error subclass with an `inner` property containing the original error.

   Type checkers can guarentee the relationship between error and response. If an error is thrown, error will always be a TryError and result will be undefined, and if the expression succeeds, error will always be undefined and result will be whatever is expected from the expression. Typescript already supports this.

```ts
function try_<T>(fn: () => T): [TryError, undefined] | [undefined, T] {
  try {
    return [undefined, fn()];
  } catch (e) {
    return [new TryError(e), undefined];
  }
}

const [error, data] = try_(() => 25 as const);

if (error) {
  const e: TryError = error;
  const r: undefined = data;
} else {
  const e: undefined = error;
  const r: 25 = data;
}
```

2. **Automatic Error Handling**: While this proposal facilitates error handling, it does not automatically handle errors for you. You will still need to write the necessary code to manage errors; the proposal simply aims to make this process easier and more consistent.

<br />

## Current Limitations

3. **Handling `finally` Blocks**: The try expression guarentees that code following the try expression will always run regardless of whether the code throws. However, if you still need it for some reason, you can still use use a try-finally after the try expression line.

```ts
let data;
try {
  data = action()
  // some code that only runs if no error happened
  otheraction()
} catch (error) {
  // catch errors, possibly returning or throwing
} finally {
  // finally code
}

// Needs to be done as follows

const [error, data] = try action()
try {
  if (error) {
    // catch errors, possibly returning or throwing
  } else {
    // some code that only runs if no error happened
    otheraction()
  }
} finally {
  // finally code
}


```

<br />

## Help Us Improve This Proposal

This proposal is in its early stages, and we welcome your input to help refine it. Please feel free to open an issue or submit a pull request with your suggestions.

**_Any contribution is welcome!_**

<br />

## Authors

- [Arthur Fiorette](https://github.com/arthurfiorette) <sub>([Twitter](https://x.com/arthurfiorette))</sub>


<br />

## Inspiration

## Inspiration

- [This tweet from @LeaVerou](https://x.com/LeaVerou/status/1819381809773216099)
- [Effect TS Error Management](https://effect.website/docs/guides/error-management)
- The [`tuple-it`](https://www.npmjs.com/package/tuple-it) npm package, which introduces a similar concept but modifies the `Promise` and `Function` prototypes—an approach that is less ideal.
- The frequent oversight of error handling in JavaScript code.

<br />

## License

This proposal is licensed under the [MIT License](./LICENSE).

<br />
